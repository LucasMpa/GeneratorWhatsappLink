{"version":3,"sources":["serviceWorker.js","utils/Helper.js","Components/form/index.js","routes/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Helper","value","replace","FormPage","useState","phoneNumber","setphoneNumber","msgText","setMsgText","data","setData","successAlert","setSuccesAlert","dangerAlert","setDangerAlert","console","log","className","class","role","onChange","e","target","type","mask","maskChar","placeholder","onClick","onKeyUp","id","rows","onlyNumbers","length","href","history","createBrowserHistory","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6EClBeC,E,yGAEEC,GACjB,OAAOA,EAAMC,QAAQ,MAAO,Q,KCGnB,SAASC,IAAY,IAAD,EAGOC,mBAAS,IAHhB,mBAGxBC,EAHwB,KAGXC,EAHW,OAIDF,mBAAS,IAJR,mBAIxBG,EAJwB,KAIfC,EAJe,OAKPJ,mBAAS,IALF,mBAKxBK,EALwB,KAKlBC,EALkB,OAMQN,oBAAS,GANjB,mBAMxBO,EANwB,KAMVC,EANU,OAOOR,oBAAS,GAPhB,mBAOxBS,EAPwB,KAOXC,EAPW,KA6B/B,OAFJC,QAAQC,IAAIH,GAIJ,yBAAKI,UAAU,QACX,yBAAKA,UAAU,kBAEPJ,EAAiB,yBAAKK,MAAM,qBAAqBC,KAAK,SAArC,8CACX,KAINR,EAAe,yBAAKO,MAAM,sBAAsBC,KAAK,SAAtC,+CACV,KAIL,yBAAKF,UAAU,cACX,6DACA,uDAIA,kBAAC,IAAD,CACIG,SAAU,SAACC,GAAOf,EAAee,EAAEC,OAAOrB,QAC1CsB,KAAK,MAAMC,KAAK,mBAChBC,SAAU,KACVC,YAAY,mBACZT,UAAU,eACVU,QAAS,WAhC7Bb,EAAe,IACfF,EAAe,OAkCC,2CACA,8BACI,8BACAgB,QAAS,SAACP,GAAQP,EAAeO,EAAEC,OAAOrB,QAG1CgB,UAAU,eACVY,GAAG,GACHH,YAAY,sBAAsBI,KAAK,IACvCV,SAAU,SAACC,GAAOb,EAAWa,EAAEC,OAAOrB,WAG1C,2BAAOgB,UAAU,wBAAjB,4CAEJ,yBAAKA,UAAU,YACP,4BACAU,QAjExB,WACuB,KAAhBtB,GAAkC,KAAZE,GACrBG,EAAQ,yCAAD,OAA0CV,EAAO+B,YAAY1B,GAA7D,iBAAkFE,IAG3FF,EAAY2B,QAAU,IAAkB,KAAZzB,EAC1BK,GAAe,GAEnBE,GAAe,IA0DKS,KAAK,SACLN,UAAU,mBAHV,cAOA,+BACI,uBAAGgB,KAAMxB,GAAOA,KAM5B,yBAAKQ,UAAU,gBACX,8CACA,4BACI,6EACA,gFACA,+CAAe,8CAAf,UACA,0DACA,iEAGJ,6BACI,2BAAOA,UAAU,wBACjB,6BAAMR,GADN,6ZAUhB,yBAAKQ,UAAU,uBACX,4DC7GhB,IAAMiB,EAAUC,cAeDC,MAbf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQF,QAASA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAM,IAAKC,UAAWpC,QCR7CqC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SJyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.37e299db.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default class Helper {\n  \n    static onlyNumbers(value){\n      return value.replace(/\\D/g, \"\");\n    }\n  }","import React, { useState } from \"react\";\r\nimport './styles.css'\r\nimport InputPhoneMask from \"../inputPhoneMask\";\r\nimport InputMask from 'react-input-mask';\r\nimport Helper from '../../utils/Helper';\r\n\r\nexport default function FormPage() {\r\n\r\n\r\n    const [phoneNumber, setphoneNumber] = useState(\"\");\r\n    const [msgText, setMsgText] = useState(\"\");\r\n    const [data, setData] = useState(\"\");\r\n    const [successAlert, setSuccesAlert] = useState(false);\r\n    const [dangerAlert, setDangerAlert] = useState(false);\r\n    \r\n\r\n    function Api() {\r\n        if(phoneNumber !== '' && msgText !== '') {\r\n            setData(`https://api.whatsapp.com/send?phone=55${Helper.onlyNumbers(phoneNumber)}&text=${msgText}`)\r\n        \r\n        }\r\n       if(phoneNumber.length >= 14 && msgText !== ''){\r\n            setSuccesAlert(true)\r\n       } else {\r\n        setDangerAlert(true)\r\n          \r\n       }\r\n    }\r\n\r\n    function clearValues(){\r\n        setDangerAlert('')\r\n        setSuccesAlert('')\r\n    }\r\nconsole.log(dangerAlert)\r\n\r\n    return(\r\n        \r\n        <div className=\"main\">\r\n            <div className=\"form-container\">\r\n                {\r\n                    dangerAlert  ?   <div class=\"alert alert-danger\" role=\"alert\"> This is a danger alert—check it out!\r\n                </div>  : null\r\n\r\n                }\r\n                {\r\n                    successAlert ? <div class=\"alert alert-success\" role=\"alert\"> This is a success alert—check it out!\r\n                </div> : null\r\n                }\r\n                \r\n               \r\n                    <div className=\"form-group\">\r\n                        <h1>Gerador de Link para Whatsaap</h1>\r\n                        <label>\r\n                            Número de celular\r\n                        </label>\r\n                       \r\n                        <InputMask \r\n                            onChange={(e) => {setphoneNumber(e.target.value)}}\r\n                            type=\"tel\" mask=\"(99) 9 9999-9999\"\r\n                            maskChar={null}\r\n                            placeholder=\"(99) 9 9999-9999\"\r\n                            className=\"form-control\"\r\n                            onClick={() => {clearValues()}}\r\n                            />\r\n                            \r\n                        <label>Mensagem</label>\r\n                        <form>\r\n                            <textarea \r\n                            onKeyUp={(e) => { setDangerAlert(e.target.value)\r\n                                \r\n                            }}\r\n                            className=\"form-control\" \r\n                            id=\"\"\r\n                            placeholder=\"Digite seu texto...\" rows=\"5\"  \r\n                            onChange={(e) => {setMsgText(e.target.value)}}\r\n                            />  \r\n                        </form>\r\n                        <small className=\"form-text text-muted\">Não guardamos nenhum dado informado.</small>\r\n                    </div>\r\n                    <div className=\"btn-copy\">\r\n                            <button\r\n                            onClick={Api}\r\n                            type=\"button\" \r\n                            className=\"btn btn-success\"\r\n                            >\r\n                                Gerar Link\r\n                            </button>\r\n                            <small>\r\n                                <a href={data}>{data}</a>\r\n                            </small>\r\n                            \r\n                            \r\n                    </div>\r\n\r\n                    <div className=\"side-content\">\r\n                        <h2>Como Funciona?</h2>\r\n                        <ul>\r\n                            <li>Insira o nº do WhatsApp Ex: 85 9 9660-5866</li> \r\n                            <li>Escreva a mensagem padrão que será exibida</li> \r\n                            <li>Clique em “<strong>GERAR LINK</strong>”</li> \r\n                            <li>Copie o link e compartilhe</li> \r\n                            <li>Antes de usar, faça o msgText</li>\r\n                        </ul>\r\n                        \r\n                        <div>\r\n                            <small className=\"form-text text-muted\">\r\n                            <pre>{data}</pre>\r\n                                O gerador de links é uma ótima ferramenta para ações de marketing ou relacionamento. \r\n                                Com o link para mensagens personalizadas, você poderá utilizar em campanhas, redes sociais, email marketing, banners e etc. \r\n                                O bom de encurtar e personalizar links e mensagens do WhatsApp é que funcionará no desktop e no mobile da mesma forma. \r\n                                Faça bom uso da ferramenta encurtadora de WhatsApp.\r\n                            </small>    \r\n                        </div>\r\n                    </div>\r\n            </div>\r\n            <div className=\"publicity-container\">\r\n                <title-pub>\r\n                \r\n                    Em construção\r\n                </title-pub>\r\n            </div>  \r\n        </div>\r\n             \r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {Switch, Route, BrowserRouter, Router} from \"react-router-dom\";\r\nimport { createBrowserHistory } from 'history';\r\nimport FormPage from '../Components/form';\r\n\r\n\r\n\r\nconst history = createBrowserHistory();\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Router history={history}>\r\n        <Switch>\r\n          <Route exact path={'/'} component={FormPage} />\r\n\r\n        </Switch>\r\n      </Router>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './routes' \n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}